#+BEGIN_QUOTE
Depuis un peu plus d'un an, j'utilise quotidiennement le langage [[https://kotlinlang.org][Kotlin]] pour mon
activité professionnelle. En tant qu'étudiant, j'ai *vraiment* détesté utiliser
le langage Java. Je le trouvais verbeux, peu expressif et imposant une collection
de pratiques, les motifs de conceptions, que je trouvais compliqué. Heureusement,
Kotlin est, selon moi, bien plus expressif et agréable à utiliser que son
prédécesseur.

Kotlin apporte beaucoup d'innovations. Les couroutines, les familles scellées,
un support décent des fonctions anonymes, les extensions et beaucoup d'autres,
tout en permettant d'interopérer facilement avec Java (et donc le milliards
d'outils peuplant son ecosystème). Ces apports font du langage un outil
relativement agréable à utiliser. En complément, Kotlin bénéficie d'une 
communauté très large et très productive en bibliothèques, présentations, 
articles et tutoriels.

Dans cet article, je vous propose de découvrir une de ces nouveautés, les
*extensions*, au travers d'un exemple plutôt réaliste, suivi d'exemples
beaucoup moins utiles mais rigolos (enfin... je trouve) ! Comme évoqué, la
communauté Kotlin étant très productive, il est possible que ces "techniques"
soient déjà longuement expliquées dans d'autres articles... je suis "un peu"
désolé pour mon manque d'originalité !
#+END_QUOTE

Comme l'indique très précisemment [[https://kotlinlang.org/docs/reference/extensions.html][la section dédiée aux extensions]] dans le manuel
de Kotlin, ces dernières permettent d'étendre facilement une classe existante.
Quand on ne bénéficie pas de mécanisme d'extension, il faut ruser pour étendre
les fonctionnalité d'un objet, par exemple, en utilisant l'héritage (ce qui
peut être très ennuyant quand la [[https://docs.oracle.com/javase/7/docs/api/java/lang/String.html][classe est finale]]...), en utilisant des 
décorateurs ou en construisant une bibliothèque dont l'interface n'exposerait
que des méthodes statiques (par exemple). Heureusement, les extensions permettent
d'étendre les fonctionnalités d'une classe de manière homogène. Par exemple,
je peux facilement, au moyen des extensions, ajouter dans mon /scope/ une méthode
src_kotlin{String#emphasis} qui mettra le contenu de ma chaine en majuscule et
lui ajoutera un point d'exclamation, pour marquer l'emphase !

#+BEGIN_SRC Kotlin :data-roe-kind code :data-line-number true
fun String.emphasis() = 
    "${this.toUpperCase()} !"

fun main() {
    println("Hello World".emphasis())
}
#+END_SRC

Le premier usage de ces extensions est... comme leur nom l'indique, d'étendre
des classes existantes. Comme il s'agit de leur raison d'être principal, je ne
vais pas m'étendre sur cet usage spécifique, la section qui leur est dédiée est
claire et couvre tous les /edge-cases/. Commençons par un usage, de mon point
de vue, très utile !

** Préciser le receveur

Bien que les extensions offrent un moyen confortable d'étendre une classe déjà
existante. Je trouve que leur usage va beaucoup plus loin. Quand on veut étendre
une classe qui /est paramétrée/, il suffit de transporter ses génériques, comme
lorsque l'on rédige une fonction générique /normale/ :

#+BEGIN_SRC Kotlin :data-roe-kind code :data-line-number true
fun <A, B> List<A>.zipWith(l: List<B>) : List<Pair<A, B>> =
    mapIndexed { index, left ->
        val right = l[index]
        Pair(left, right)
    }
#+END_SRC

On observe que le type src_kotlin{A}, qui normalement fait partie de la définition
de la classe doit être transporté dans sa définition. src_kotlin{A} étant un
paramètre de type de fonction classique, il est possible de le fixer. Par exemple,
définissons une fonction qui n'est disponible *que* pour les listes d'entiers :

#+BEGIN_SRC Kotlin :data-roe-kind code :data-line-number true
fun List<Int>.sumElements() =
    reduce { x, y -> x + y }
#+END_SRC

Même si ça peut sembler anodin, les extensions offrent plus de finesses dans la
déclaration des receveurs. Observons tout de suite un cas un peu plus précis.

*** Le cas de src_kotlin{flatten()}

Un des reproches souvent exprimé à l'encontre de la programmation orientée objets
(statiquement typés) est l'incapacité d'exprimer certaines méthodes, notamment
à cause du manque de contrôle sur le type du receveur habitant une classe.
Par exemple, la méthode src_kotlin{flatten()} dont le type serait 
src_kotlin{T<T<A>> -> T<A>}. Cette méthode est assez utile (notamment pour les 
src_kotlin{List<A>} ou encore les src_kotlin{Option<A>}). Prenons le cas de
*Option*, qui est plus court à implémenter que des listes.

On voudrait exprimer, au moyen de classes, la présence ou l'absence de valeur,
soit encoder l'équivalent du src_kotlin{null}. On distingue deux cas : 

- Présence de valeur : src_kotlin{Some(value)} ;
- Son absence : src_kotlin{None()}.

Pour lier les deux constructeurs à un seul type on utilise une famille scellée,
voici une proposition d'implémentation (qui ne se soucie pas du tout de la variance
pour simplifier la lecture) :

#+BEGIN_SRC Kotlin :data-roe-kind code :data-line-number true
sealed class Option<A> {
    abstract fun <B> flatMap(f:(A) -> Option<B>): Option<B>
    fun <B> map(f:(A) -> B) = flatMap { wrap(f(it)) }

    companion object {
        fun <A> wrap(value: A): Option<A> =
            Some(value)
    }
}
class None<A> : Option<A>() {
    override fun <B> flatMap(f: (A) -> Option<B>): Option<B> =
        None()
}
data class Some<A>(val value: A) : Option<A>() {
    override fun <B> flatMap(f: (A) -> Option<B>): Option<B> =
        f(value)
}
#+END_SRC

On peut noter que src_kotlin{map} s'exprime très bien au moyen de 
src_kotlin{flatMap} et notre structure a le comportement attendu :
#+BEGIN_SRC Kotlin :data-roe-kind code :data-line-number true :data-line-start 18
val x = Option.wrap(10)
  .map { it + 10}
  .flatMap { None<Int>() } // L'inférence fonctionne rarement :lol:
  .map { it + 20}
#+END_SRC

Un combinateur que l'on aime adjoindre à src_kotlin{map} et src_kotlin{flatMap}
est le combinateur src_kotlin{flatten} (ou src_kotlin{join} dans d'autres
langages) qui pourrait très bien s'exprimer via src_kotlin{flatMap}. Mais comment
l'exprimer dans la classe src_kotlin{Option} ?

#+BEGIN_SRC Kotlin :data-roe-kind code :data-line-number true :data-hl 4
sealed class Option<A> {
    abstract fun <B> flatMap(f:(A) -> Option<B>): Option<B>
    fun <B> map(f:(A) -> B) = flatMap { wrap(f(it)) }
    ??? fun flatten() : = flatMap { it }

    companion object {
        fun <A> wrap(value: A): Option<A> =
            Some(value)
    }
}
#+END_SRC

Ici, on voit rapidement le manque de contrôle que le traitement uniforme des
paramètres génériques peut engendrer. Une astuce pour palier à ça serait de
déplacer la fonction src_kotlin{flatten} dans l'objet compagnon :

#+BEGIN_SRC Kotlin :data-roe-kind code :data-line-number true :data-hl 9;10
sealed class Option<A> {
    abstract fun <B> flatMap(f:(A) -> Option<B>): Option<B>
    fun <B> map(f:(A) -> B) = flatMap { wrap(f(it)) }

    companion object {
        fun <A> wrap(value: A): Option<A> =
            Some(value)

        fun <A> flatten(x: Option<Option<A>>) = 
            x.flatMap { it }
    }
}
#+END_SRC

On pourrait se plaindre que cela ruine notre belle /pipeline/, cependant,
grâce à la petite méthode src_kotlin{let}, on ne peut y voir que du feu :

#+BEGIN_SRC Kotlin :data-roe-kind code :data-line-number true :data-line-start 18
val x = Option.wrap(10)
  .map { it + 10}
  .flatMap { None<Int>() }
  .map { Option.wrap(it + 20)}
  .let(::flatten)
#+END_SRC

Même si cette approche est, à l'usage, indéniablement satisfaisante, elle
impose au développeur de garder dans son esprit ce qui est relié à l'instance,
les méthodes, et ce qui est greffé à l'objet compagnon. Ce que l'on constate,
c'est que les paramètres de fonctions permettent de décrire des structures
paramétrés de manière plus fine. Heureusement, on a vu que les extensions
ne sont, au final, que des fonctions, et dans la rubrique précédente, nous
avons créé une méthode d'extension sur un type concret. 

Vous vous en doutez, il est possible de décrire une méthode pour le type 
src_kotlin{Option<Option<A>>} :

#+BEGIN_SRC Kotlin :data-roe-kind code :data-line-number true
fun <A> Option<Option<A>>.flatten() = 
   flatMap { it }
#+END_SRC

L'/import/ de cette méthode permet de travailler avec src_kotlin{flatten}
directement comme une méthode sur une option d'option. Si par contre, on
essaye d'appliquer la méthode à une valeur qui n'a pas le type 
src_kotlin{Option<Option<...>>}, le programme ne compilera pas. Ce qui est
exactement le comportement que l'on attend !

#+BEGIN_SRC Kotlin :data-roe-kind code :data-line-number true :data-line-start 18
val x = Option.wrap(10)
  .map { it + 10}
  .flatMap { None<Int>() }
  .map { Option.wrap(it + 20)}
  .flatten()
#+END_SRC

Cette utilisation des extensions peut sembler très naïve, mais elle couvre
une problématique assez ancienne (et connue) de l'organisation en classes : 
*l'absence de méthode /gardées/*. Soit des contraintes de sous-typage (ou de
traits) sur certaines méthodes. Kotlin offre une solution via les extensions,
en définissant les /guards/ en dehors de la définition de la classe. Il existe
d'autres approches, notamment l'utilisation de *témoins d'égalité*,
en Scala, qui prennent le forme d'/implicits/.

En conclusion de cette première présentation très scolaire, les extensions
offrent une manière de typer plus finement les receveurs de méthodes et c'est
assez pratique pour définir des fonctions communes... comme src_kotlin{flatten}.
Concrètement, les extensions permettent d'ajouter des contraintes sur la
disponibilité d'une méthode en fonction du type du générique. Ça peut paraitre
assez anodin, mais ça permet d'implémenter des méthodes qu'il serait impossible
d'écrire normalement et garder une approche d'appel (l'envoi de message) 
systématique.

** Extensions locales

Maintenant que nous avons observé un premier usage assez raisonnable des
extensions, amusons-nous avec des exemples moins réalistes !
Le langage d'importation de Kotlin (et par extension de Java) est assez pauvre.
On ne peut ouvrir/importer des fragments de bibliothèques que dans le
/toplevel/ d'un fichier. Il n'est pas possible de faire des ouverture au niveau
de l'expression (ou de manière moins radicale, au niveau de la fonction).

Heureusement, avec un peu d'astuce, il est possible de ne rendre des extensions
disponible que dans un /scope/ spécifique, au moyen de la fonction
[[https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/with.html][with]]. Ce n'est probablement pas très utile, mais ça calme l'hystérie du
programmeur OCaml que je suis, où chaque module peut être ouvert localement !

Concrètement, il est possible de définir des extensions au sein d'une classe
(ou d'une interface). Par exemple : 

#+BEGIN_SRC Kotlin :data-roe-kind code :data-line-number true :data-hl 2
class MyContext {
    fun Int.successor() = this + 1
    fun succ(x: Int) = x.successor()
}
#+END_SRC

Ici, on défini une extension src_kotlin{successor} sur les entiers et cette
extension n'est accessible que dans notre classe. Mais est-il possible de
mutualiser nos extensions pour que l'on puisse définir un ensemble d'extensions
que l'on rend disponibles dans plusieurs classes ? 

Pour cela, on peut utiliser une autre classe, mais ça introduirait une relation
d'héritage directe entre la classe qui /applique les extensions/ et je ne suis
pas convaincu que ça serait très pertinent. Pas de panique, utilisons une
interface !

#+BEGIN_SRC Kotlin :data-roe-kind code :data-line-number true
interface IntExt {
    fun Int.successor() = this + 1
    fun Int.predecessor() = this - 1
}

class MyContext : IntExt {
    fun succ(x: Int) = x.successor()
    fun pred(x: Int) = x.predecessor()
}
#+END_SRC

Nous pouvons facilement stocker nos extensions "à appliquer" dans une interface
et les appliquer, au moyen de l'implémentation d'interface !

Les interfaces (ou les classes) nous permettent de transporter des collections
d'extensions arbitraires. Dans les faits, ce n'est pas très utile car
généralement, un fichier Kotlin n'expose pas "beaucoup de classe", cependant,
en utilisant la fonction [[https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/with.html][with]], il est possible d'appliquer une extension dans
un /scope/ spécifique, démonstration : 

#+BEGIN_SRC Kotlin :data-roe-kind code :data-line-number true
interface IntExt {
    fun Int.successor() = this + 1
    fun Int.predecessor() = this - 1
}

// On définit un contexte 
class MyContext : IntExt 

val x = with(MyContext()) {
   // Dans ce scope, j'ai accès à mes extensions
   10.successor()
}
#+END_SRC

La fonction src_kotlin{with} nous permet d'exécuter une lambda dans le contexte
de l'objet donné en argument. De ce fait, l'utilisation de cette fonction
sur une instance d'une classe implémentant l'interface qui applique les
extensions, rend ces extensions disponibles dans uniquement dans le /bloc/ 
de la fonction.

Même si l'application locale des extensions peut paraitre inutile, le point
essentiel de cette section est qu'il est possible de *définir un ensemble*
*d'extensions qui sera appliqué à la demande d'un utilisateur* au niveau
d'une classe (ou d'une autre interface) ou plus brutalement d'une expression
au moyen de la construction src_kotlin{with}.

** Extensions génériques

Maintenant que nous pouvons appliquer des extensions à la volée en usant et
abusant de l'incroyablement permissif src_kotlin{with}, essayons d'aller
plus loins ! Appliquons des extensions à sur des génériques ! C'est entièrement
possible car Kotlin ne limite pas l'application d'extensions à des classes
connues. Il est tout à fait possible d'appliquer une extension à une classe
que l'on ne connait pas ! Par exemple :

#+BEGIN_SRC Kotlin :data-roe-kind code :data-line-number true :data-hl 11
// On défini notre extension de manière "générique"
interface Silly<T> {
    fun T.bang() = "Bang Bang"
}

// On défini un contexte pour profiter de [with]
class Context : Silly<String>

fun main() {
    val x = with(Context()){
        "foo".bang()
    }
    println(x)
}
#+END_SRC

Comme le montre l'exemple, on peut décider arbitrairement d'ajouter des
méthodes à une classe que l'on ne connait pas. De plus, comme le langage 
des génériques permet de définir des contraintes de généricité, il est possible
de contraindre les classes sur lesquelles on veut appliquer les extensions à
la demande. Mais concrètement est-il possible de trouver des cas d'usages à
cette utilisation spécifique des extensions ? 

Pour être très honnête... je pense que cet usage spécifique relève plus de
l'expérimentation et l'amusement. Il s'agit d'un encodage un peu particulier
pour écrire autrement ce qu'il aurait été possible d'écrire de manière
plus traditionnelle via des passages de fonctions ou de la répétition des
implémentation manuelles. Mais pour le plaisir de l'exercice, implémentons
l'inénarrable *Monoïde* de manière "presque générique".

*** Un fournisseur de /reducers/

L'objectif de l'article n'est pas de s'étendre sur une définition rigoureuse
du monoïde, [[https://www.youtube.com/watch?v=srQt1NAHYC0][certains l'ont déjà fait de manière très claire]]. Retenons juste
que si une classe possède un élément neutre et que ses instances possèdent 
une méthode src_kotlin{combine} qui prend deux instance de cette classe et
retourne une valeur de cette classe (donc src_kotlin{T.combine(x: T) : T} en
respectant certaines lois : 

- src_kotlin{combine} est associatif
- src_kotlin{element_neutre.combine(x)} est égal à src_kotlin{x}
- src_kotlin{x.combine(element_neutre)} est égal à src_kotlin{x}

C'est lois permettent l'implémentation de combinateurs qui exploitent l'opération
src_kotlin{combine}. Il est par exemple possible de définir un monoïde sur
les entiers pour qui l'opérateur src_kotlin{combine} est simplement l'addition
et l'élément neutre est ... logiquement, src_kotlin{zéro}. Ou alors un monoïde,
lui aussi sur les entiers, mais où cette fois, l'élément neutre est 
src_kotlin{un}. Un dernier exemple serait une monoïde sur les chaines de 
caractéres pour lesquels l'opérateur src_kotlin{combine} serait la concatènation.

Quand on possède un monoïde, on possède aussi, /de facto/ une fonction 
src_kotlin{reduce} qui transforme un ensemble de valeur de notre monoïde en
une seule. Dans le cas du monoïde des entiers adjoints à l'addition, le
résultat serait la somme de tous les éléments. 

Pour définir cette génériquement on voudrait pouvoir l'exprimer de cette
manière : 
 
#+BEGIN_SRC Kotlin :data-roe-kind code :data-line-number true
fun <T> Collection<Monoid<T>>.reduce() = 
  Collection.fold(T.neutralElement) { accumulator, element -> 
     accumulator.combine(element)
  }
#+END_SRC

Même si au survol, cette "implémentation" semble valide, elle pose tout de même
plusieurs soucis : 

- premièrement, elle n'est pas implémentable ... (à cause du src_kotlin{T.neutral_element})
- ensuite, elle considère que tout ce qui implémente src_kotlin{Monoid} est "valide", donc
  le monoïde des entiers sur l'addition serait compatible avec le monoïde des entiers sur 
  le produit
- il ne serait pas possible de "convertir" un type existant en monoïde  (ou alors
  il faudrait /wrapper/ le type dans une classe qui implémenterait l'interface 
  src_kotlin{Monoid}.

Kotlin ne permettant pas d'exprimer du sous-typage structurel, je vous propose
d'utiliser nos nouveaux super-pouvoirs pour fournir des /reducers/ via des
extensions !

#+BEGIN_SRC Kotlin :data-roe-kind code :data-line-number true
interface Monoid<Subject> {
    fun Subject.neutralElement() : Subject
    fun Subject.combine(x: Subject) : Subject
}
#+END_SRC

Rien ne nous empêche de définir des extensions abstraites, dès lors que l'on
contruira un /contexte/ pour nos différents monoïdes, il faudra fournir une
implémentation pour src_kotlin{neutralElement} et src_kotlin{combine}. Par
exemple :

#+BEGIN_SRC Kotlin :data-roe-kind code :data-line-number true :data-line-start 5
class AddMonoid : Monoid<Int> {
    override fun Int.combine(x: Int) = plus(x)
    override fun Int.neutralElement() = 0
}

class StringMonoid : Monoid<String> {
    override fun String.combine(x: String) = "${this}$x"
    override fun String.neutralElement() = ""
}
#+END_SRC

Comme tout objet ne possède pas obligatoirement d'objet compagnon, je ne peux
hélas pas intégrer "facilement" src_kotlin{neutralElement} à un niveau
superieur à celui de l'instance... ce qui impose tout de même quelques /hacks/
un peu triste dans l'implémentation de src_kotlin{reduce}.

#+BEGIN_SRC Kotlin :data-roe-kind code :data-line-number true :data-hl 5..10
interface Monoid<Subject> {
    fun Subject.neutralElement() : Subject
    fun Subject.combine(x: Subject) : Subject

    fun Collection<Subject>.reduce(initial: Subject? = null) : Subject? {
        return this.fold(initial) { acc, left ->
            val right = acc ?: left.neutralElement()
            right?.combine(left)
        }
    }
}
#+END_SRC

On ajoute dans notre interface qui transporte nos extensions une methode
src_kotlin{reduce} qui agit sur les src_kotlin{Collection<Subject>}. On triche
un peu pour accéder à l'élément neutre, et en supposant que si la liste est
vide elle renverra src_kotlin{null} si l'utilisateur ne donne pas en argument
l'élément neutre (si elle n'est pas vide par contre, ça fonctionnera). 
Il serait possible, moyennant plus d'encodage, de corriger le soucis de 
l'élément neutre, mais le code risquerait de devenir plus complexe (pour, au
final, pas grand chose). 

Quoi qu'il en soit, il est possible d'utiliser src_kotlin{reduce} dans des
contextes spécifiques : 

#+BEGIN_SRC Kotlin :data-roe-kind code :data-line-number true
fun main() {
    val x = with(AddMonoid()) {
        listOf(1, 2, 3, 4, 5).reduce()
    } // x = 15

    val y = with(StringMonoid()) {
        listOf("Hello ", "World ", "!").reduce()
    } // y = "Hello World !"
}
#+END_SRC

Concrètement, on rend possible, dans le contexte de nos monoïdes, des extensions
sur les collections implémentant src_kotlin{reduce}. Malgré que l'implémentation
de l'élément neutre ne soit pas vraiment satisfaisante, la solution propose
tout de même très peu de /boilerplate/.

Même si dans des exemples plus réalistes, il est probable que ce genre d'encodage
ne soit pas d'une très grande aide, j'ai l'intuition qu'ils offrent des
exemples acceptables (et un peu amusant tout de même) de ce qu'offrent les
extensions. D'ailleurs, en en parlant avec [[https://twitter.com/fteychene][Francois Teychene]] et [[https://twitter.com/dplaindoux][Didier Plaindoux]],
ils m'ont fait remarquer que c'était un encodage similaire (complété par de
la génération de code pour simplifier l'usage et les capacités) qu'utilisait
[[Arrow.kt][https://arrow-kt.io/]] pour simuler les classe de types "à la Haskell". Les
développeurs de la bibliothèque ont d'ailleurs ouvert une [[https://github.com/Kotlin/KEEP/pull/87][proposition d'évolution]]
du langage qui est encore active, très populaire, mais ... hélas, pas dans 
la /roadmap/ du langage à l'heure actuelle.

** Pour conclure

En conclusion, les extensions sont un mécanisme puissant qui permet, dans un
premier temps, d'éviter l'abus de modules utilitaires qui cassent l'envoi
de message (l'appel de méthode classique) pour ajouter des fonctionnalités.
Elles permettent aussi de typer plus finement les receveurs de méthodes, comme
nous l'avons vu avec la méthode src_kotlin{flatten()}. Et elles permettent aussi
d'encoder des constructions génériques un peu plus farfelues.

Même si mes deux derniers points étaient un peu exentriques, l'utilisation
d'une approche similaire dans Arrow.kt démontre qu'elles reposent, tout de même,
sur une bonne intention (aha) et c'était assez amusant à expérimenter !

J'espère que cet article aura, au mieux, permis de comprendre quelques usages
complémentaires à l'utilisation des extensions et au mieux, du mieux, d'avoir
eu envie de regarder Arrow.kt en profondeur ! Pour aller un peu plus loins, 
[[https://twitter.com/dplaindoux][Didier Plaindoux]] à rédigé un [[https://gist.github.com/d-plaindoux/ec3dd2b705a551342713fc6437dab15b][Gist]] qui tire partit d'une approche similaire mais
qui, moyennant un peu plus de plomberie, gère des types un peu plus complexes.

Pour tout ceux concernés, je vous souhaite beaucoup de courage pour la suite
du confinement ! *#stayHome*.
